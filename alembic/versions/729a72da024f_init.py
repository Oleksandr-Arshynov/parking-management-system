"""Init

Revision ID: 729a72da024f
Revises: 04adbc8acffd
Create Date: 2024-08-19 20:45:42.864443

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '729a72da024f'
down_revision: Union[str, None] = '04adbc8acffd'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('parking',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('rate', sa.Float(), nullable=True),
    sa.Column('entry_time', sa.DateTime(), nullable=True),
    sa.Column('exit_time', sa.DateTime(), nullable=True),
    sa.Column('license_plate', sa.String(length=10), nullable=True),
    sa.Column('parking_duration', sa.Interval(), nullable=True),
    sa.Column('total_cost', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('finish_parking', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_parking_id'), 'parking', ['id'], unique=False)
    op.create_index(op.f('ix_parking_license_plate'), 'parking', ['license_plate'], unique=True)
    op.create_table('plates',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('license_plate', sa.String(length=10), nullable=True),
    sa.Column('black_list', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_plates_id'), 'plates', ['id'], unique=False)
    op.create_index(op.f('ix_plates_license_plate'), 'plates', ['license_plate'], unique=True)
    op.drop_index('ix_cars_id', table_name='cars')
    op.drop_index('ix_cars_license_plate', table_name='cars')
    op.drop_table('cars')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('cars',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('car', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('public_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('entry_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('exit_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('license_plate', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('parking_duration', postgresql.INTERVAL(), autoincrement=False, nullable=True),
    sa.Column('total_cost', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('black_list', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('rate', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='cars_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='cars_pkey')
    )
    op.create_index('ix_cars_license_plate', 'cars', ['license_plate'], unique=True)
    op.create_index('ix_cars_id', 'cars', ['id'], unique=False)
    op.drop_index(op.f('ix_plates_license_plate'), table_name='plates')
    op.drop_index(op.f('ix_plates_id'), table_name='plates')
    op.drop_table('plates')
    op.drop_index(op.f('ix_parking_license_plate'), table_name='parking')
    op.drop_index(op.f('ix_parking_id'), table_name='parking')
    op.drop_table('parking')
    # ### end Alembic commands ###
